<?x0ml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwill.spring2.repository.CommentDao">
    
    <!-- 특정 포스트에 달려 있는 댓글 목록 검색 -->
    <select id="selectByPostId" resultType="Comment">
        select * from comments where post_id = #{postId}
        order by id desc
    </select>

<!--    // 댓글 삭제 는 id , 글이 삭제 될때 댓글도 같이 삭제 포링키로 되어져 있으면 그 글의 관련된 모든 
    // 댓글을 삭제후 포스트를 삭제되야함.
    // 내가 작성한 댓글을 id로 삭제, 특정 포스트에 달려있는 모든 댓글을 삭제
    
    // 업데이트는 ctext는 where id, modified는 systimestamp -->
    
    <!-- 특정 포스트에 댓글 추가(insertComment) -->
    <insert id="insertComment">
        insert into comments (post_id, ctext, username, created_time, modified_time)
        values (#{postId}, #{ctext}, #{username}, systimestamp, systimestamp)
    </insert>
    
    <!-- 댓글 아이디로 댓글 삭제(deleteById) -->
    <delete id="deleteById">
        delete from comments where id = #{id}
    </delete>
    
    <!-- 특정 포스트에 달려 있는 모든 댓글 삭제(deleteByPostId) -->
    <delete id="deleteByPostId">
        delete from comments where post_id = #{postId}
    </delete>
    
    <!-- 해당 아이디의 댓글 내용(텍스트)을 수정(updateComment) -->
    <update id="updateComment">
        update comments 
        set ctext = #{ctext}, modified_time = systimestamp
        where id = #{id}
    </update>
    
    <!-- 특정 포스트에 달려있는 댓글 개수(selectCommentCount) -->
    <!-- 리턴타입에 따라서 Comment인지 integer. mybatis에 있는 내장 타입의 클래스! -->
    <select id="selectCommentCount" resultType="integer"> 
        select count(*) from comments where post_id = #{postId}
    </select>
    
    <!-- 해당 아이디의 댓글 1개 검색(selectById) -->
    <select id="selectById" resultType="Comment">
        select * from comments where id = #{id} 
    </select>
    
</mapper>