<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
    xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
        http://mybatis.org/schema/mybatis-spring https://mybatis.org/schema/mybatis-spring.xsd">

    <!-- bean definitions here:
        스프링 프레임워크에서 생성하고 관리할 자바 객체들을 선언.
    -->
    
    <!-- HikariConfig 빈 생성을 위한 설정 
        HikariConfig hikariConfig = new HikariConfig();
        hikariConfig.setDriverClassName("oracle.jdbc.OracleDriver");
        ...
    -->
    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
        <property name="driverClassName" value="oracle.jdbc.OracleDriver"/>
        <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe"/>
        <property name="username" value="jspstudy"/>
        <property name="password" value="jspstudy"/>
    </bean>
    
    <!-- HikariDataSource 빈 생성을 위한 설정 
        HikariDataSource ds = new HikariDataSource(hikariConfig);
    -->
    <bean id="ds" class="com.zaxxer.hikari.HikariDataSource"> <!-- 아이디는 변수이름 -->
        <constructor-arg ref="hikariConfig" /> <!-- ref가 위쪽에 있는 bean을 참조하기 위해 id를 적어줌 -->
    </bean>
    
    <!-- SqlSessionFactoryBean 빈 생성을 위한 설정 
        영속성 프레임워크인 MyBatis 데이터 소스(커넥션 풀)을 이용해서 SQL 문장을 실행하고, 
        그 결과를 처리해서 리턴할 수 있는 객체.
        SqlSessionFactoryBean sqlSession = new SqlSessionFactoryBean();
        sqlSession.setDataSource(ds);
        sqlSession.setMapperLocations("classpath:/mappers/**/*.xml");
        sqlSession.setConfigLocation("classpath:/mybatis-config.xml")
    -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean"> <!-- 생성자 호출 -->
         <!-- ref 다른 bean의 id를 찾아가는것 -->
        <property name="dataSource" ref="ds"/> <!-- name은 위의 클래스 필드의 이름 이라서 틀리면 안됨 -->
        
        <!-- value는 값 자체를 아규먼트로 주는것 -->
        <property name="mapperLocations" value="classpath*:mappers/**/*.xml"/>
        <!-- src -> 
                main -> 
                    resources 
                        mapper
                            하위는 몇개든 상관없고 그 밑에 xml 확장자 파일이 있으면 된다.
                            -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/> 
    </bean>
    
    <!-- MyBatis-Spring 프레임워크에서 SQL을 수행하고 결과처리하는 컴포넌트들을 
        검색할 기본 패키지 설정. 
     MyBatis 프레임워크는 base-package 아래의 인터페이스(들)을 검색해서 구현 객체를 생성.
     -->
    
    <mybatis:scan base-package="com.itwill.spring2.repository"/>
    
    <!-- 생성하는 시점이 디스패쳐 서블릿이 관리하는게 아니라 (핸들러에서 관리하는게 아님)
        백엔드(서비스,리포지터리) 관련된것은 애플리케이션. 애너테이션에 설정된 빈 객체들을 관리  -->
    <!-- 스프링 컨테이너에서 컴포넌트 빈들을 검색할 기본 패키지를 설정. 
        스프링 컨테이너가 base-package와 그 하위 패키지들을 검색해서
        컴포넌트 애너테이션(@Component, @Service, ...)이 설정된 클래스 객체들을
        (싱글턴으로) 생성하고 관리하기 위해서.
        생성된 컴포넌트 빈들을 필요한 곳(예: 컨트롤러)에 주입할 수 있도록.    
    -->
    <context:component-scan base-package="com.itwill.spring2.service" />
    

</beans>
