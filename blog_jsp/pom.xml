<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.itwill</groupId>
  <artifactId>blog</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>BLOG</name>
  <description>Introduction to Servlet/JSP</description>

    <!-- POM에서 사용할 속성(변수) 정의 -->
    <properties>
        <servlet-api-version>6.0.0</servlet-api-version>
        <jsp-api-version>4.0.0</jsp-api-version>
        <el-api-version>5.0.0</el-api-version>
        <jstl-api-version>3.0.2</jstl-api-version>
        <jstl-impl-version>3.0.1</jstl-impl-version>
        <log4j-version>2.24.3</log4j-version>
        <slf4j-api-version>2.0.16</slf4j-api-version>
        <junit-version>5.11.4</junit-version>
        <ojdbc17-version>23.6.0.24.10</ojdbc17-version>
        <hikaricp-version>6.2.1</hikaricp-version>
    </properties>
    
    
    <!-- 의존성(라이브러리) 설정 -->
    <dependencies>
        <!-- Jakarta EE. Tomcat 11에서 실행되는 서블릿 (라이브러리) 버전 
        톰캣은 서블릿을 실행해주는 서블릿 컨테이너. 톰캣이 우리가 만든 서블릿 객체 생성 관리 메서드 호출
        그럴려면 톰캣이 그런 라이브러리를 갖고 있어야하기 때문에 톰캣에서 제공한다 라는 의미 scope
        scope는 기본값이 아닌 애들은 넣지 않음 
        Tomcat - webapp - WEB-INF, META-INF , WEB-INF에 lib가 있는데 우리가 필요한 라이브러리는 
        넣어서 빌드 패스해야하는데 웹은 필요한 자르를 복사해서 넣어주는 것 이게 기본값 이런 경우는 scope를 쓰지 않음
        톰캣이 갖고 있으면 복사할 필요가 없다라는 의미인데 직접 다운로드해야 라이브러리에 넣어야함 (외부 라이브러리)
        이애들은 scope를 쓰지 않음. -->
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>${servlet-api-version}</version>
            <!-- ${servlet-api-version}: properties 태그에서 정의한 속성 값을 읽음. -->
            <scope>provided</scope>
            <!-- scope = provided : WAS에서 제공되는 의존성. -->
        </dependency>
        <dependency>
            <groupId>jakarta.servlet.jsp</groupId>
            <artifactId>jakarta.servlet.jsp-api</artifactId>
            <version>${jsp-api-version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- Jakarta Expression Language -->
        <dependency>
            <groupId>jakarta.el</groupId>
            <artifactId>jakarta.el-api</artifactId>
            <version>${el-api-version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- Jakarta Standard Tag Library(JSTL) API -->
        <dependency>
            <groupId>jakarta.servlet.jsp.jstl</groupId>
            <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
            <version>${jstl-api-version}</version>
        </dependency>
        <!-- Jakarta Standard Tag Library(JSTL) Implementation -->
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>jakarta.servlet.jsp.jstl</artifactId>
            <version>${jstl-impl-version}</version>
        </dependency> 
        
        <!-- Log4j, Slf4j 라이브러리를 사용하기 위해서 -->
        <!-- Apache Log4j implementation -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j-version}</version>
        </dependency>
        
        <!-- Apache Log4j API 
        같은 버전을 사용하는 애들은 프로퍼티를 같은 것으로 적용하는게 좋다. -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j-version}</version>
        </dependency>  
        
        <!-- The Apache Log4j SLF4J API binding to Log4j 2 Core 
        묶어주는 역할을 하는 라이브러리-->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j2-impl</artifactId>
            <version>${log4j-version}</version>
        </dependency>
        
        <!-- Slf4j API -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j-api-version}</version>
        </dependency>
        
        <!-- 자바 단위 테스트(Java unit test)를 하기 위해서 -->
        <!-- Module "junit-jupiter-engine" of JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit-version}</version>
            <scope>test</scope>
            <!-- scope=test: 단위 테스트 클래스들만 사용하고, 릴리즈에서는 사용하지 않음. -->
        </dependency>
        
        <!-- Module "junit-jupiter-api" of JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit-version}</version>
            <scope>test</scope>
        </dependency>
        
        <!-- Oracle JDBC 라이브러리 -->
        <!-- Oracle JDBC Driver compatible with JDK17, JDK19, and JDK21 -->
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc17</artifactId>
            <version>${ojdbc17-version}</version>
        </dependency>
        
        <!-- DBCP(데이터베이스 커넥션 풀)을 사용하기 위한 라이브러리 -->
        <!-- Ultimate JDBC Connection Pool -->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>${hikaricp-version}</version>
        </dependency>
        
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <release>21</release>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.4.0</version>
            </plugin>
        </plugins>
    </build>
</project>